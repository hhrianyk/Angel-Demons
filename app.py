from flask import *
from werkzeug.middleware.proxy_fix import ProxyFix
import sqlite3
from datetime import datetime
import requests
from threading import Thread
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)
app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)

# Telegram –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_TOKEN = '7663765318:AAGcWrl-MlL8bdJnvRZuFaQan9Sv7bPoWI4'
TELEGRAM_CHAT_ID = ['982150223']
ADMIN_USER_IDS = set()


def init_db():
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é"""
    if os.path.exists('cafe.db'):
        os.remove('cafe.db')

    conn = sqlite3.connect('cafe.db')
    c = conn.cursor()

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    c.execute('''CREATE TABLE categories
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  description TEXT)''')

    c.execute('''CREATE TABLE menu_items
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  category_id INTEGER NOT NULL,
                  name TEXT NOT NULL,
                  description TEXT,
                  price REAL NOT NULL,
                  FOREIGN KEY (category_id) REFERENCES categories (id))''')

    c.execute('''CREATE TABLE orders
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  customer_name TEXT NOT NULL,
                  phone TEXT NOT NULL,
                  address TEXT,
                  notes TEXT,
                  total REAL NOT NULL,
                  order_date TEXT NOT NULL)''')

    c.execute('''CREATE TABLE order_items
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  order_id INTEGER NOT NULL,
                  item_name TEXT NOT NULL,
                  item_price REAL NOT NULL,
                  quantity INTEGER NOT NULL,
                  FOREIGN KEY (order_id) REFERENCES orders (id))''')

    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    c.execute("INSERT INTO categories (name, description) VALUES (?, ?)",
              ('–î–µ—Å–µ—Ä—Ç–∏', '–ß–æ—Ä–Ω–æ-–±—ñ–ª—ñ –¥–µ—Å–µ—Ä—Ç–∏ –¥–ª—è –≤–∏—Ç–æ–Ω—á–µ–Ω–∏—Ö —Å–º–∞–∫—ñ–≤'))
    c.execute("INSERT INTO categories (name, description) VALUES (?, ?)",
              ('–ù–∞–ø–æ—ó', '–ì–∞—Ä—è—á—ñ —Ç–∞ —Ö–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó –∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∏–º–∏ —Å–º–∞–∫–∞–º–∏'))

    c.execute("INSERT INTO menu_items (category_id, name, description, price) VALUES (?, ?, ?, ?)",
              (1, '–ß–æ—Ä–Ω–∏–π –º–∞–∫–∞—Ä–æ–Ω', '–ù—ñ–∂–Ω–∏–π –º–∞–∫–∞—Ä–æ–Ω –∑ —á–æ—Ä–Ω–∏–º —à–æ–∫–æ–ª–∞–¥–æ–º', 65))
    c.execute("INSERT INTO menu_items (category_id, name, description, price) VALUES (?, ?, ?, ?)",
              (1, '–ë—ñ–ª–∏–π —Ñ–æ–Ω–¥–∞–Ω', '–§–æ–Ω–¥–∞–Ω –∑ –±—ñ–ª–æ–≥–æ —à–æ–∫–æ–ª–∞–¥—É –∑ –º–∞–ª–∏–Ω–æ–≤–∏–º —Å–æ—É—Å–æ–º', 75))
    c.execute("INSERT INTO menu_items (category_id, name, description, price) VALUES (?, ?, ?, ?)",
              (2, '–ï—Å–ø—Ä–µ—Å–æ –î–µ–º–æ–Ω–∞', '–ú—ñ—Ü–Ω–∏–π –µ—Å–ø—Ä–µ—Å–æ –∑ —á–æ—Ä–Ω–æ—é –∫–∞—Ä–∞–º–µ–ª–ª—é', 55))
    c.execute("INSERT INTO menu_items (category_id, name, description, price) VALUES (?, ?, ?, ?)",
              (2, '–ê–Ω–≥–µ–ª—å—Å—å–∫–∏–π –ª–∞—Ç–µ', '–ù—ñ–∂–Ω–∏–π –ª–∞—Ç–µ –∑ –∫–≤—ñ—Ç–∫–æ–≤–∏–º –∞—Ä–æ–º–∞—Ç–æ–º', 60))

    conn.commit()
    conn.close()


def get_db():
    """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect('cafe.db')
    conn.row_factory = sqlite3.Row
    return conn


def get_menu():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–Ω—é –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    conn = get_db()
    menu = {}

    categories = conn.execute("SELECT * FROM categories").fetchall()
    for category in categories:
        items = conn.execute(
            "SELECT * FROM menu_items WHERE category_id = ?",
            (category['id'],)
        ).fetchall()
        menu[category['name']] = items

    conn.close()
    return menu


def send_telegram_notification(order_data):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram"""
    try:
        message = f"""
        üç∞ *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Angel & Demons!* üç∞
        =============================
        üë§ *–ö–ª—ñ—î–Ω—Ç:* {order_data['name']}
        üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{order_data['phone']}`
        üè† *–ê–¥—Ä–µ—Å–∞:* {order_data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
        üïí *–ß–∞—Å:* {order_data['order_date']}
        =============================
        *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:*
        """

        for item in order_data['items']:
            message += f"\n- {item['name']} √ó{item['quantity']} - {item['price'] * item['quantity']} –≥—Ä–Ω"

        message += f"""
        =============================
        üíµ *–°—É–º–∞:* {order_data['total']} –≥—Ä–Ω
        üìù *–ü—Ä–∏–º—ñ—Ç–∫–∏:* {order_data.get('notes', '–ù–µ–º–∞—î')}
        =============================
        üéâ *–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!*
        """

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        for Te in TELEGRAM_CHAT_ID:
            payload = {
                'chat_id': Te,
                'text': message,
                'parse_mode': 'Markdown'
            }

            requests.post(url, json=payload)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/about')
def about():
    return render_template('about.html')


@app.route('/menu')
def show_menu():
    menu = get_menu()
    return render_template('menu.html', menu=menu)


@app.route('/ar')
def ar_view():
    return render_template('ar.html')


@app.route('/webar/')
def full_ar_view():
    """–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π AR –ø–µ—Ä–µ–≥–ª—è–¥"""
    return render_template('webar_scanner.html')

@app.route('/webar/targets/<path:filename>')
def serve_ar_targets(filename):
    """–í—ñ–¥–¥–∞—á–∞ AR –º—ñ—Ç–æ–∫"""
    return send_from_directory('WEBAR/static/targets', filename)

@app.route('/webar/models/<path:filename>')
def serve_ar_models(filename):
    """–í—ñ–¥–¥–∞—á–∞ 3D –º–æ–¥–µ–ª–µ–π"""
    return send_from_directory('WEBAR/static/models', filename)

@app.route('/order', methods=['GET', 'POST'])
def order():
    if request.method == 'POST':
        name = request.form.get('name')
        phone = request.form.get('phone')
        address = request.form.get('address', '')
        notes = request.form.get('notes', '')
        order_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        items = []
        total = 0
        conn = get_db()

        for key, value in request.form.items():
            if key.startswith('quantity-') and request.form[key] != '0':
                item_id = key.replace('quantity-', '')
                quantity = int(request.form[key])

                item = conn.execute(
                    "SELECT id, name, price FROM menu_items WHERE id = ?",
                    (item_id,)
                ).fetchone()

                if item:
                    items.append({
                        'id': item['id'],
                        'name': item['name'],
                        'price': item['price'],
                        'quantity': quantity
                    })
                    total += item['price'] * quantity

        if items:
            try:
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT INTO orders (customer_name, phone, address, notes, total, order_date) VALUES (?, ?, ?, ?, ?, ?)",
                    (name, phone, address, notes, total, order_date)
                )
                order_id = cursor.lastrowid

                for item in items:
                    cursor.execute(
                        "INSERT INTO order_items (order_id, item_name, item_price, quantity) VALUES (?, ?, ?, ?)",
                        (order_id, item['name'], item['price'], item['quantity'])
                    )

                conn.commit()

                order_data = {
                    'name': name,
                    'phone': phone,
                    'address': address,
                    'notes': notes,
                    'order_date': order_date,
                    'items': items,
                    'total': total
                }

                Thread(target=send_telegram_notification, args=(order_data,)).start()

                flash('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.', 'success')
                return redirect(url_for('order_confirmation'))
            except Exception as e:
                conn.rollback()
                flash('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', 'error')
                print(f"Database error: {e}")
            finally:
                conn.close()
        else:
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä.', 'error')
            conn.close()

        return redirect(url_for('order'))

    menu = get_menu()
    return render_template('order.html', menu=menu)


@app.route('/order/confirmation')
def order_confirmation():
    return render_template('order_confirmation.html')


if __name__ == '__main__':
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞ –ø–µ—Ä–µ—Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Ä–æ–±–∫–∏
    #init_db()
    app.run(debug=True)

